#!/usr/bin/env python2
import base64
import difflib
import fcntl
import hashlib
import inspect
import os.path
import re
import shutil
import sys
import tempfile


class UsageException(Exception):
    pass


def command_help(*args):
    _, command_fn = find_matching_command(args)
    if len(args) > 0 and command_fn is None:
        print 'No help topic matching "{}".'.format(' '.join(args))
    if command_fn is None:
        print "\"where's all the development?\""
        print
        print 'Available commands:'
        min_width = 0
        for command_prefix, _, _ in command_fns:
            min_width = max(min_width, len(' '.join(command_prefix)))
        for command_prefix, command_fn, command_desc in command_fns:
            if command_desc is None:
                command_desc = '(no description available)'
            print '    {} - {}'.format(' '.join(command_prefix).rjust(min_width), command_desc)
    elif command_fn.__doc__ is None:
        print 'No help available for "{}".'.format(' '.join(args))
    else:
        print command_fn.__doc__


def goto(topic_reference):
    check_have_wad()
    # The topic must exist.
    topic = Topic(topic_reference)
    if topic is None:
        raise UsageException()
    # Store the new current_topic.
    current_topic = CurrentTopic(None)
    current_topic.set('the.topic_ref', topic)
    current_topic.store()


class WadObjectTypeRegistry(type):

    registry = []

    def __new__(cls, name, bases, attrs):
        new_cls = type.__new__(cls, name, bases, attrs)
        cls.registry.append(new_cls)
        return new_cls

    @classmethod
    def get(cls):
        return cls.registry


class WadObjectRegistry(type):
    registry = []

    def __new__(cls, name, bases, attrs):
        new_cls = type.__new__(cls, name, bases, attrs)
        cls.registry.append(new_cls)
        return new_cls

    @classmethod
    def get(cls):
        return cls.registry


class ReferenceType(object):
    CONTENTS_HASH = 0
    SELF_DETERMINED = 1
    SINGLETON = 2


class WadObject(object):
    __metaclass__ = WadObjectRegistry

    @classmethod
    def _name(cls):
        return cls.__name__.lower()

    def __init__(self, reference):
        self._stage_dir_and_flock = None
        if reference is None:
            self._reference = None
        else:
            # If the reference is fully qualified, check that we are the right
            # type of object.
            splitted = reference.split('/')
            if len(splitted) == 2:
                if splitted[0] != self._name():
                    raise InternalError()
                self._reference = splitted[1]
            elif len(splitted) > 2:
                raise InternalError()
            else:
                self._reference = reference

    def __eq__(self, other):
        return \
            type(self) == type(other) and \
            self._reference == other._reference

    def __str__(self):
        s = self._name() + '('
        first = True
        for attribute in self._attributes | self._optional_attributes:
            if not first:
                s += ', '
            s += '{}="{}"'.format(attribute, self.get(attribute))
            first = False
        return s + ')'

    @classmethod
    def get_reference_prefix(cls):
        return cls._name() + '/'

    @classmethod
    def iterate_all(cls):
        for entry in os.listdir(cls._all_objects_dir()):
            yield cls(entry)

    def get_reference(self):
        if self._reference is None:
            raise Exception('no reference assigned yet, did you store()?')
        return type(self).get_reference_prefix() + self._reference

    @classmethod
    def _all_objects_dir(cls):
        return os.path.join('.wad', cls._name())

    def _reference_dir(self):
        if self._reference_type == ReferenceType.SINGLETON:
            return self._all_objects_dir()
        else:
            return os.path.join(self._all_objects_dir(), self._reference)

    def _set_up_stage(self):
        # If staging is already set up, then there's nothing to do.
        if self._stage_dir_and_flock is not None:
            return
        # Create a unique stage for the changes to this object, starting with a
        # copy of the object.
        all_stages_dir = os.path.join('.wad', 'stage', self._name())
        try:
            os.makedirs(all_stages_dir)
        except OSError:
            pass
        stage_dir = tempfile.mkdtemp(dir=all_stages_dir)
        if self._reference is not None:
            # Copy over the contents: I would like to be using
            # shutil.copytree(), but it doesn't like it if the destination
            # directory already exists.
            for dirpath, dirnames, filenames in os.walk(self._reference_dir()):
                for filename in filenames:
                    path = os.path.join(dirpath, filename)
                    relative_path = unroot_path(path, self._reference_dir())
                    stage_path = os.path.join(stage_dir, relative_path)
                    try:
                        os.makedirs(os.path.dirname(stage_path))
                    except OSError:
                        pass
                    shutil.copy(path, stage_path)
        # The lock lets 'wad status' know that this staging directory is still
        # in use - on the other hand, if another process acquires this lock,
        # waits a few moments, and the directory is still present, then it is
        # likely that there is a programming error resulting in leaked stages.
        lock_filename = os.path.join(stage_dir, 'lock')
        flock = open(lock_filename, 'w')
        try:
            fcntl.flock(flock, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError:
            raise UnreachableError('{} is locked.'.format(lock_filename))
        else:
            self._stage_dir_and_flock = (stage_dir, flock)

    def object_dir(self):
        if self._stage_dir_and_flock is not None:
            stage_dir, _ = self._stage_dir_and_flock
            return stage_dir
        else:
            return self._reference_dir()

    def exists(self):
        return os.path.isdir(self.object_dir())

    def get(self, attribute):
        # The object must exist.
        if not self.exists():
            raise InternalError()
        # But the attribute might not, if it's optional.
        attrib_path = os.path.join(self.object_dir(), attribute)
        if not os.path.isfile(attrib_path):
            if attribute not in self._optional_attributes:
                raise InternalError()
            return None
        # An attribute type might get the value from just the path..
        attribute_type = self.find_matching_attribute_type(attribute)
        value = attribute_type.get_from_path(attrib_path)
        if value is not None:
            return value
        # .. or it might want to be fed the file contents.
        with open(attrib_path, 'rb') as f:
            contents = f.read()
        value = attribute_type.get_from_contents(contents)
        if value is not None:
            return value
        return None

    def find_matching_attribute_type(self, attribute):
        # Find the matching AttributeType class.
        attribute_type_cls = None
        for cls in WadObjectTypeRegistry.get():
            if attribute.endswith(cls.get_extension()):
                if attribute_type_cls is not None:
                    raise InternalError('more than one attribute type matches the extension: {}'.format(attribute))
                attribute_type_cls = cls
        if attribute_type_cls is None:
            raise Exception('no attribute type matches the extension: {}'.format(attribute))
        return attribute_type_cls

    def set(self, attribute, value=None, source_filename=None):
        # Set up the stage and where we're going to store this object.
        self._set_up_stage()
        object_dir_path = os.path.join(self.object_dir(), attribute)
        try:
            os.makedirs(os.path.dirname(object_dir_path))
        except OSError:
            pass
        # Figure out if, and how, we should be storing this value.
        attribute_type = self.find_matching_attribute_type(attribute)
        value, source_filename = attribute_type.set(value=value, source_filename=source_filename)
        if value is not None:
            with open(object_dir_path, 'w') as f:
                f.write(value)
        elif source_filename is not None:
            shutil.copy(source_filename, object_dir_path)
        else:
            raise InternalError()

    def store(self):
        # If there aren't staged changes, then there's nothing to do.
        if self._stage_dir_and_flock is None:
            return
        # Get rid of the flock.
        stage_dir, flock = self._stage_dir_and_flock
        flock.close()
        os.remove(os.path.join(stage_dir, 'lock'))
        # Check the attributes to make sure the object is complete.
        attributes = set()
        for dirpath, _, filenames in os.walk(stage_dir):
            for fn in filenames:
                attributes.add(unroot_path(os.path.join(dirpath, fn), stage_dir))
        if not attributes.issuperset(self._attributes):
            raise Exception('{}, {}'.format(attributes, self._attributes))
        superset = self._attributes | self._optional_attributes
        if not attributes.issubset(superset):
            raise Exception('{}, {}'.format(attributes, superset))
        # If this WadObject type is supposed to autogenerate its reference,
        # then generate the reference from the sha1 of everything in the staged
        # directory.
        if self._reference_type == ReferenceType.CONTENTS_HASH:
            paths = []
            for dirpath, dirnames, filenames in os.walk(self.object_dir()):
                for fn in filenames:
                    paths.append(os.path.join(dirpath, fn))
            paths.sort()
            _hash = hashlib.sha1()
            for path in paths:
                _hash.update('!path!' + base64.b64encode(unroot_path(path, stage_dir)))
                with open(path) as f:
                    for chunk in f.read(1000000):
                        if chunk == '':
                            break
                        _hash.update('!chunk!' + base64.b64encode(chunk))
            self._reference = _hash.hexdigest()
        # Then move the stage directory over to the right place.
        if os.path.exists(self._reference_dir()):
            shutil.rmtree(self._reference_dir())
        shutil.move(stage_dir, self._reference_dir())
        self._stage_dir_and_flock = None


# replace remaining uses of relative_dirpath with this
def unroot_path(path, root):
    dirname = os.path.dirname(path)
    relative_dirname = os.path.relpath(dirname, root)
    if relative_dirname == '.':
        relative_dirname = ''
    unrooted_path = os.path.join(relative_dirname, os.path.basename(path))
    return unrooted_path


class Topic(WadObject):
    __metaclass__ = WadObjectRegistry
    _attributes = {'description.str', 'tip.commit_ref'}
    _optional_attributes = set()
    _reference_type = ReferenceType.SELF_DETERMINED


class CurrentTopic(WadObject):
    __metaclass__ = WadObjectRegistry
    _attributes = {'the.topic_ref'}
    _optional_attributes = set()
    _reference_type = ReferenceType.SINGLETON


def new_topic(name, starting_from_commit=None):
    reference = 'topic/{}'.format(name)
    topic = Topic(reference)
    if topic.exists():
        raise UsageException('Topic "{}" already exists.'.format(name))
    topic = Topic(name)
    topic.set('description.str', 'TODO - new topic')
    if starting_from_commit is None:
        current_topic = CurrentTopic(None).get('the.topic_ref')
        tip = current_topic.get('tip.commit_ref')
        topic.set('tip.commit_ref', tip)
    else:
        topic.set('tip.commit_ref', starting_from_commit)
    topic.store()
    goto(topic.get_reference())


class Entry(WadObject):
    __metaclass__ = WadObjectRegistry
    _attributes = {'name.str', 'permissions.str'}
    _optional_attributes = {'contents.file', 'contents_file_hash.str', 'contents.entry_ref_set'}
    _reference_type = ReferenceType.CONTENTS_HASH


def calculate_file_hash(path):
    _hash = hashlib.sha1()
    with open(path) as f:
        for chunk in f.read(1000000):
            if chunk == '':
                break
            _hash.update(chunk)
    return _hash.hexdigest()


def register_path(path):
    if os.path.isfile(path) or os.path.isdir(path):
        e = Entry(None)
        e.set('name.str', os.path.basename(path))
        e.set('permissions.str', 'TODO')
        if os.path.isfile(path):
            e.set('contents.file', source_filename=path)
            e.set('contents_file_hash.str', calculate_file_hash(path))
        elif os.path.isdir(path):
            entries = set()
            for entry in os.listdir(path):
                sub_path = os.path.join(path, entry)
                if sub_path != './.wad':
                    _object = register_path(sub_path)
                    entries.add(_object)
            e.set('contents.entry_ref_set', entries)
        e.store()
        return e
    raise UnreachableException()


def command_up():
    """wad up

    Creates a wad in the current directory.
    """
    try:
        os.mkdir('.wad')
    except OSError:
        raise UsageException('Directory {} is already a wad.'.format(os.path.abspath('.')))
    first_commit = Commit(None)
    first_commit.set('author.str', 'just some guy')
    first_commit.set('description.str', 'wad up')
    first_commit.store()
    new_topic('main', starting_from_commit=first_commit)


def check_have_wad():
    if not os.path.exists('.wad'):
        raise UsageException('Directory {} is not a wad. Try `wad up`.'.format(os.path.abspath('.')))


def command_status():
    """wad status

    Shows the current topic, changes, etc.
    """
    check_have_wad()
    current_topic = CurrentTopic(None).get('the.topic_ref')
    print 'topic: {}'.format(current_topic.get_reference())
    print 'topic description: {}'.format(current_topic.get('description.str'))
    tip = current_topic.get('tip.commit_ref')
    print 'latest commit: {}'.format(tip.get('description.str'))


def command_commits():
    check_have_wad()
    current_topic = CurrentTopic(None).get('the.topic_ref')
    commit = current_topic.get('tip.commit_ref')
    for _ in range(10):
        if not isinstance(commit, Commit):
            raise InternalException()
        print '{}    {}'.format(commit.get_reference(), commit.get('description.str'))
        commit = commit.get('parent.commit_ref')
        if commit is None:
            break


def command_diff():
    current_topic = CurrentTopic(None).get('the.topic_ref')
    tip = current_topic.get('tip.commit_ref')
    root_entry = tip.get('root.entry_ref')
    if root_entry.get('name.str') != '.':
        raise InternalError()
    for value in diff_entry('.', root_entry):
        print value


def diff_entry(path, entry):
    if path == './.wad':
        return

    if not os.path.exists(path):
        path_type = None
    elif os.path.isfile(path):
        path_type = 'f'
    elif os.path.isdir(path):
        path_type = 'd'
    else:
        raise UnreachableException()

    if entry is None:
        entry_type = None
    elif entry.get('contents.file') is not None:
        entry_type = 'f'
    elif entry.get('contents.entry_ref_set') is not None:
        entry_type = 'd'
    else:
        raise UnreachableException()

    if path_type == 'd':
        on_disk = set(os.listdir(path))
    else:
        on_disk = set()
    if entry_type == 'd':
        in_repo = {entry.get('name.str'): entry for entry in entry.get('contents.entry_ref_set')}
    else:
        in_repo = {}
    for name in on_disk | set(in_repo.keys()):
        for value in diff_entry(os.path.join(path, name), in_repo.get(name)):
            yield value

    if path_type is None and entry_type is not None:
        yield ('delete', path)
    elif path_type is not None and entry_type is None:
        yield ('insert', path)
    elif path_type != entry_type:
        yield ('replace', path)
    elif path_type == 'f' and entry_type == 'f':
        # check permissions
        # check sha
        # sha differ? do diff
        # and what if file is huge
        if calculate_file_hash(path) != entry.get('contents_file_hash.str'):
            contents_lines = entry.get('contents.file').split('\n')
            path_lines = [line.rstrip('\n') for line in open(path).readlines()]
            for line in difflib.context_diff(contents_lines, path_lines):
                print line
            yield ('modify', path)
    elif path_type == 'd' and entry_type == 'd':
        # check permissions
        # yield ('check', path)
        pass
    else:
        raise UnreachableException()


def command_topics():
    check_have_wad()
    current_topic = CurrentTopic(None).get('the.topic_ref')
    for topic in Topic.iterate_all():
        print '{}  {}  "{}"'.format(
            '*' if topic == current_topic else ' ',
            topic.get_reference(),
            topic.get('description.str')
        )


def command_new_topic(name):
    new_topic(name)


def command_new_commit(description):
    check_have_wad()
    if description is None:
        raise Exception('"new commit" needs a description')
    # Make a new commit, as a child of the tip of the topic.
    current_topic = CurrentTopic(None).get('the.topic_ref')
    tip = current_topic.get('tip.commit_ref')
    new_commit = Commit(None)
    new_commit.set('description.str', description)
    new_commit.set('author.str', 'just some guy')
    new_commit.set('parent.commit_ref', tip)
    new_commit.store()
    # Update the current topic.
    current_topic.set('tip.commit_ref', new_commit)
    current_topic.store()


# for author, need to read a ~/.wadconfig
class Commit(WadObject):

    __metaclass__ = WadObjectRegistry
    _attributes = {'description.str', 'root.entry_ref', 'author.str'}
    _optional_attributes = {'parent.commit_ref'}
    _reference_type = ReferenceType.CONTENTS_HASH

    def __init__(self, *args, **kwargs):
        super(Commit, self).__init__(*args, **kwargs)
        # When a Commit is created, it automatically adds the working directory
        # to itself.
        root = register_path('.')
        root.store()
        self.set('root.entry_ref', root)


class SnakeType(object):
    __metaclass__ = WadObjectTypeRegistry

    @classmethod
    def get_extension(cls):
        return '.snake'

    @classmethod
    def set(cls, value=None, source_filename=None):
        if source_filename is not None:
            raise InternalError()
        if not isinstance(value, str):
            raise InternalError()
        if re.search(r'[^0-9a-z_]', 'blah_ddd__ ') is not None:
            raise UsageError()
        return value, None

    @classmethod
    def get_from_path(cls, path):
        return None

    @classmethod
    def get_from_contents(cls, contents):
        return contents


class StrType(object):
    __metaclass__ = WadObjectTypeRegistry

    @classmethod
    def get_extension(cls):
        return '.str'

    @classmethod
    def set(cls, value=None, source_filename=None):
        if source_filename is not None:
            raise InternalError()
        if not isinstance(value, str):
            raise InternalError()
        return value, None

    @classmethod
    def get_from_path(cls, path):
        return None

    @classmethod
    def get_from_contents(cls, contents):
        return contents


class RefType(object):

    @classmethod
    def get_extension(cls):
        return '.' + cls._inner_type.__name__.lower() + '_ref'

    @classmethod
    def set(cls, value=None, source_filename=None):
        if source_filename is not None:
            raise InternalError()
        if not issubclass(cls._inner_type, WadObject):
            raise InternalError()
        if not isinstance(value, cls._inner_type):
            raise InternalError()
        return value.get_reference(), None

    @classmethod
    def get_from_path(cls, path):
        return None

    @classmethod
    def get_from_contents(cls, contents):
        return cls._inner_type(contents)


class TopicRefType(RefType):
    __metaclass__ = WadObjectTypeRegistry
    _inner_type = Topic


class CommitRefType(RefType):
    __metaclass__ = WadObjectTypeRegistry
    _inner_type = Commit


class EntryRefType(RefType):
    __metaclass__ = WadObjectTypeRegistry
    _inner_type = Entry


class FileType(object):
    __metaclass__ = WadObjectTypeRegistry

    @classmethod
    def get_extension(cls):
        return '.file'

    @classmethod
    def set(cls, value=None, source_filename=None):
        if value is not None:
            raise InternalError()
        if source_filename is None:
            raise InternalError()
        return None, source_filename

    @classmethod
    def get_from_path(cls, path):
        return None

    @classmethod
    def get_from_contents(cls, contents):
        return contents


class RefSetType(object):

    @classmethod
    def get_extension(cls):
        return '.' + cls._inner_type.__name__.lower() + '_ref_set'

    @classmethod
    def set(cls, value=None, source_filename=None):
        if source_filename is not None:
            raise InternalError()
        if not issubclass(cls._inner_type, WadObject):
            raise InternalError()
        if not isinstance(value, set):
            raise InternalError()
        if not all(isinstance(v, cls._inner_type) for v in value):
            raise InternalError()
        sorted_ref_set = [v.get_reference() for v in value]
        sorted_ref_set.sort()
        value = '\n'.join(sorted_ref_set)
        return value, None

    @classmethod
    def get_from_path(cls, path):
        return None

    @classmethod
    def get_from_contents(cls, contents):
        objs = []
        for maybe_ref in contents.split('\n'):
            if maybe_ref != '':
                objs.append(cls._inner_type(maybe_ref))
        return objs


class EntryRefSetType(RefSetType):
    __metaclass__ = WadObjectTypeRegistry
    _inner_type = Entry


def command_goto(reference):
    if reference is None:
        raise UsageException('"goto" needs a reference')
    goto(reference)


def command_restack():
    pass


def command_reset():
    pass


command_fns = (
    (('help',), command_help, '(You are reading it right now.)'),
    (('up',), command_up, 'Creates a wad in the current directory'),
    (('status',), command_status, 'Shows the current topic, changes, etc'),
    (('topics',), command_topics, 'Lists all topics'),
    (('new', 'topic'), command_new_topic, 'Creates a new topic from the current topic'),
    (('commits',), command_commits, 'Lists commits from the current topic in reverse chronological order'),
    (('new', 'commit'), command_new_commit, 'Packages up the changes into a new commit in the current topic'),
    (('diff',), command_diff, 'Shows the diff'),
    (('goto',), command_goto, 'Goes to the given reference'),
    (('restack',), command_restack, 'Change the parent of the given commit to a different commit'),
    (('reset',), command_reset, 'Undoes the changes from the last commit')
)


def find_matching_command(inp):
    command_prefix = None
    command_fn = None
    for prefix, fn, _ in command_fns:
        if tuple(inp[:len(prefix)]) == prefix:
            # If there's more than one matching command prefix, then we screwed
            # up.
            if command_prefix is not None:
                raise InternalError()
            command_prefix = prefix
            command_fn = fn
    return command_prefix, command_fn


# Find the command corresponding to the command line arguments.
command_prefix, command_fn = find_matching_command(sys.argv[1:])

# If we can't find the command that the user asked for, or there's no command,
# then show `wad help`.
if command_prefix is None:
    command_prefix = tuple(sys.argv[1:])
    command_fn = command_help

# Call the command with the arguments passed in on the command line.
command_args = sys.argv[1 + len(command_prefix):]
inspect_command_fn = inspect.getargspec(command_fn)
if inspect_command_fn.varargs is not None:
    # A function with 'varargs' can handle any number of parameters.
    pass
elif len(command_args) < len(inspect_command_fn.args):
    # Otherwise, we should substitute None for all the arguments missing from
    # the command line.
    missing_args = len(inspect_command_fn.args) - len(command_args)
    command_args.extend([None] * missing_args)
elif len(command_args) > len(inspect_command_fn.args):
    # If more arguments are passed in than the function accepts, that's an
    # error.
    raise Exception('got {} expected {}'.format(len(command_args), len(inspect_command_fn.args)))
command_fn(*command_args)
